# This is a basic workflow to help you get started with Actions

name: immortalwrt x86_64 24.10

on:
  workflow_dispatch:
    inputs:
      release:
        description: 将编译出的镜像上传到 Release
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      lan_ip:
        description: 'LAN IP'
        required: true
        default: '192.168.123.1'
#        type: choice
#        options:
#          - '192.168.1.1'
#          - '192.168.10.1'
#          - '192.168.100.1'
#          - '192.168.123.1'
      enable_pkg:
        description: "下载附加包?"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  DOWNLOAD_BASE: https://downloads.immortalwrt.org
  VENDOR: immortalwrt
  VERSION: 24.10.0
  EXT_PKG_FILE: external-package-24.10.txt
  BUILD_SCRIPT: build-24.10.sh

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Generate:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ inputs.pppoe_account }}" || -z "${{ inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Setup Environment Variables
        run: |
          echo "DATE=$(TZ=UTC-8 date +%Y%m%d)" >> $GITHUB_ENV
          echo "DATETIME=$(TZ=UTC-8 date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip qemu-utils mkisofs zstd
          sudo timedatectl set-timezone "Asia/Shanghai"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: origin

      - name: Patch inputs info
        working-directory: origin
        run: |
          if [[ "${{ inputs.enable_pppoe }}" == "yes" ]]; then
            sed -i "s/# pppoe_username=\"\"/pppoe_username=\"${{ inputs.pppoe_account }}\"/g" files/etc/uci-defaults/99-init-settings
            sed -i "s/# pppoe_password=\"\"/pppoe_password=\"${{ inputs.pppoe_password }}\"/g" files/etc/uci-defaults/99-init-settings
          fi
          sed -i "s/192\.168\.[0-9]*\.[0-9]*/${{ inputs.lan_ip }}/g" files/etc/uci-defaults/99-init-settings
          cat files/etc/uci-defaults/99-init-settings

      - name: Download Image Builder
        run: |
          wget $DOWNLOAD_BASE/releases/$VERSION/targets/x86/64/$VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          tar --use-compress-program=unzstd -xvf $VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          rm -rf $VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64/

      - name: Download External Packages
        if: ${{ inputs.enable_pkg == 'yes' }}
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          temp_dir=$(mktemp -d)
          echo "Downloading packages"
          cat ${{ env.EXT_PKG_FILE }} | xargs wget -P "$temp_dir"
          cd ./packages/
          pkg_dir=$(pwd)
          echo "Extracting packages"         
          find "$temp_dir" -maxdepth 1 -name "*.tar.gz"|xargs -i tar -xzf {} -C "$temp_dir"
          find "$temp_dir" -maxdepth 1 -name "*.tar.xz"|xargs -i tar -xJf {} -C "$temp_dir"
          find "$temp_dir" -maxdepth 1 -name "*.tar.bz2"|xargs -i tar -xjf {} -C "$temp_dir"
          find "$temp_dir" -maxdepth 1 -name "*.tgz"|xargs -i tar -xzf {} -C "$temp_dir"
          find "$temp_dir" -maxdepth 1 -name "*.zip"|xargs -i unzip -q {} -d "$temp_dir"        
          find "$temp_dir" -name "*.ipk" -exec cp {} "$pkg_dir" \;
          rm *placeholder*
          ls

      - name: Run Patch and DIY Scripts
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          bash scripts/builder-patch.sh
          bash scripts/zsh.sh

      - name: Generate Firmware
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          if [[ "${{ inputs.enable_pkg }}" == "yes" ]]; then
            bash ${{ env.BUILD_SCRIPT }} -p
          else
            bash ${{ env.BUILD_SCRIPT }}
          fi

      - name: List Output Files
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64
        run: |
          ls

      - name: Upload Artifacts ext4-combined-efi.img.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-${{ env.DATETIME }}-ext4-combined-efi.img.gz
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*ext4-combined-efi.img.gz

      - name: Upload Artifacts ext4-combined-efi.vmdk.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-${{ env.DATETIME }}-ext4-combined-efi.vmdk.gz
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*ext4-combined-efi.vmdk.gz

      - name: Upload Artifacts squashfs-combined-efi.img.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-${{ env.DATETIME }}-squashfs-combined-efi.img.gz
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*squashfs-combined-efi.img.gz

      - name: Upload Artifacts ext4-combined-efi.qcow2.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-${{ env.DATETIME }}-ext4-combined-efi.qcow2.gz
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*ext4-combined-efi.qcow2.gz

      - name: Upload Firmware to Release
        if: inputs.release == 'yes'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*.gz
          asset_name: ${{ github.repository.name }}-${{ github.sha }}
          tag: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-${{ env.DATETIME }}
          overwrite: true
          body: |
            LAN IP：${{ inputs.lan_ip }}

#      - name: Delete Old Releases
#        uses: dev-drprasad/delete-older-releases@master
#        with:
#          keep_latest: 8
#          delete_tags: true

#      - name: Delete Old Workflows
#        uses: Mattraks/delete-workflow-runs@main
#        with:
#          retain_days: 0
#          keep_minimum_runs: 2
